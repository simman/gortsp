<html>
<title>RTSP OVER UDP TO WebRTC</title>
<meta http-equiv="Expires" content="0">
<meta http-equiv="Last-Modified" content="0">
<meta http-equiv="Cache-Control" content="no-cache, mustrevalidate">
<meta http-equiv="Pragma" content="no-cache">
<link href="https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/5.3.1/css/bootstrap.min.css" rel="stylesheet">
<script src="https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/5.3.1/js/bootstrap.min.js"></script>
<script src="https://cdn.bootcdn.net/ajax/libs/adapterjs/0.15.5/adapter.min.js"></script>
<style>
    video { max-width: 500px; }
</style>
<body>
<div class="container text-center mt-5">
    <h2>RTSP OVER UDP TO WebRTC</h2>
    <div class="col mt-5">
        <div class="row">
            <div class="input-group mb-3">
            <span class="input-group-text">rtsp地址</span>
            <input type="text" class="form-control" id="rtspAddress" />
            <button type="button" class="btn btn-success" onclick="startPlay()">播放</button>
            </div>
        </div>
        <div class="border" id="video" style="min-height: 100px">
            <p>Video</p>
        </div>
        <div id="logs" class="border mt-3">
            <p>Logs</p>
        </div>
    </div>
</div>
<script>
    let log = msg => {
        document.getElementById('logs').innerHTML += `<p class="text-muted">${msg}</p>`
    }
    log('status')
    log('connected')
    const suuid = "10086"
    let localSessionDescription = undefined;
    let pc = new RTCPeerConnection({
        iceServers: [
            {
                urls: 'stun:stun.l.google.com:19302'
            }
        ]
    });
    pc.ontrack = function (event) {
        var el = document.createElement(event.track.kind)
        el.srcObject = event.streams[0]
        el.autoplay = true
        el.controls = true

        document.getElementById('video').appendChild(el)
    }
    pc.oniceconnectionstatechange = e => log(pc.iceConnectionState)
    pc.onicecandidate = event => {
        if (event.candidate === null) {
            localSessionDescription = btoa(JSON.stringify(pc.localDescription));
        }
    }
    pc.addTransceiver('video', {'direction': 'recvonly'})
    pc.createOffer().then(d => pc.setLocalDescription(d)).catch(log)


    window.startPlay = () => {
        const rtspAddress = document.getElementById('rtspAddress').value
        if (rtspAddress === '') {
            alert("rtsp address must not be empty")
            return;
        }

        const videoNode = document.getElementById('video')
        while (videoNode.firstChild) {
            videoNode.removeChild(videoNode.lastChild);
        }

        fetch("/play/" + suuid, {
            method: 'POST',
            body: JSON.stringify({bsd: localSessionDescription, rtsp: rtspAddress})
        }).then(res => res.json()).then(result => {
            pc.setRemoteDescription(new RTCSessionDescription(JSON.parse(atob(result))))
        })
    }
</script>
</body>
</html>